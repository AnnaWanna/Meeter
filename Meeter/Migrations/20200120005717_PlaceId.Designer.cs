// <auto-generated />
using System;
using Meeter.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Meeter.Migrations
{
    [DbContext(typeof(NormalDataContext))]
    [Migration("20200120005717_PlaceId")]
    partial class PlaceId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Meeter.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("EventName");

                    b.Property<int>("GroupId");

                    b.Property<int>("PlaceId");

                    b.Property<string>("PlaceId1");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PlaceId1");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Meeter.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Creatorid");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Creatorid");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Meeter.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Meeter.Models.Location", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<float>("Lat");

                    b.Property<float>("Lng");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Meeter.Models.Place", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon");

                    b.Property<string>("LocationId");

                    b.Property<string>("Name");

                    b.Property<bool>("OpenNow");

                    b.Property<int>("PriceLevel");

                    b.Property<float>("Rating");

                    b.Property<int>("UserRatingsTotal");

                    b.Property<string>("Vicinity");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Meeter.Models.PlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlaceId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TypeId");

                    b.ToTable("PlaceTypes");
                });

            modelBuilder.Entity("Meeter.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PlaceId");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Types");

                    b.HasData(
                        new { Id = 1, Name = "accounting" },
                        new { Id = 2, Name = "airport" },
                        new { Id = 3, Name = "amusement_park" },
                        new { Id = 4, Name = "aquarium" },
                        new { Id = 5, Name = "art_gallery" },
                        new { Id = 6, Name = "atm" },
                        new { Id = 7, Name = "bakery" },
                        new { Id = 8, Name = "bank" },
                        new { Id = 9, Name = "bar" },
                        new { Id = 10, Name = "beauty_salon" },
                        new { Id = 11, Name = "bicycle_store" },
                        new { Id = 12, Name = "book_store" },
                        new { Id = 13, Name = "bowling_alley" },
                        new { Id = 14, Name = "bus_station" },
                        new { Id = 15, Name = "cafe" },
                        new { Id = 16, Name = "campground" },
                        new { Id = 17, Name = "car_dealer" },
                        new { Id = 18, Name = "car_rental" },
                        new { Id = 19, Name = "car_repair" },
                        new { Id = 20, Name = "car_wash" },
                        new { Id = 21, Name = "casino" },
                        new { Id = 22, Name = "cemetery" },
                        new { Id = 23, Name = "church" },
                        new { Id = 24, Name = "city_hall" },
                        new { Id = 25, Name = "clothing_store" },
                        new { Id = 26, Name = "convenience_store" },
                        new { Id = 27, Name = "courthouse" },
                        new { Id = 28, Name = "dentist" },
                        new { Id = 29, Name = "department_store" },
                        new { Id = 30, Name = "doctor" },
                        new { Id = 31, Name = "drugstore" },
                        new { Id = 32, Name = "electrician" },
                        new { Id = 33, Name = "electronics_store" },
                        new { Id = 34, Name = "embassy" },
                        new { Id = 35, Name = "fire_station" },
                        new { Id = 36, Name = "florist" },
                        new { Id = 37, Name = "funeral_home" },
                        new { Id = 38, Name = "furniture_store" },
                        new { Id = 39, Name = "gas_station" },
                        new { Id = 40, Name = "grocery_or_supermarket" },
                        new { Id = 41, Name = "gym" },
                        new { Id = 42, Name = "hair_care" },
                        new { Id = 43, Name = "hardware_store" },
                        new { Id = 44, Name = "hindu_temple" },
                        new { Id = 45, Name = "home_goods_store" },
                        new { Id = 46, Name = "hospital" },
                        new { Id = 47, Name = "insurance_agency" },
                        new { Id = 48, Name = "jewelry_store" },
                        new { Id = 49, Name = "laundry" },
                        new { Id = 50, Name = "lawyer" },
                        new { Id = 51, Name = "library" },
                        new { Id = 52, Name = "light_rail_station" },
                        new { Id = 53, Name = "liquor_store" },
                        new { Id = 54, Name = "local_government_office" },
                        new { Id = 55, Name = "locksmith" },
                        new { Id = 56, Name = "lodging" },
                        new { Id = 57, Name = "meal_delivery" },
                        new { Id = 58, Name = "meal_takeaway" },
                        new { Id = 59, Name = "mosque" },
                        new { Id = 60, Name = "movie_rental" },
                        new { Id = 70, Name = "movie_theater" },
                        new { Id = 71, Name = "moving_company" },
                        new { Id = 72, Name = "museum" },
                        new { Id = 73, Name = "night_club" },
                        new { Id = 74, Name = "painter" },
                        new { Id = 75, Name = "park" },
                        new { Id = 76, Name = "parking" },
                        new { Id = 77, Name = "pet_store" },
                        new { Id = 78, Name = "pharmacy" },
                        new { Id = 79, Name = "physiotherapist" },
                        new { Id = 80, Name = "plumber" },
                        new { Id = 81, Name = "police" },
                        new { Id = 82, Name = "post_office" },
                        new { Id = 83, Name = "primary_school" },
                        new { Id = 84, Name = "real_estate_agency" },
                        new { Id = 85, Name = "restaurant" },
                        new { Id = 86, Name = "roofing_contractor" },
                        new { Id = 87, Name = "rv_park" },
                        new { Id = 88, Name = "school" },
                        new { Id = 89, Name = "secondary_school" },
                        new { Id = 90, Name = "shoe_store" },
                        new { Id = 91, Name = "shopping_mall" },
                        new { Id = 92, Name = "spa" },
                        new { Id = 93, Name = "stadium" },
                        new { Id = 94, Name = "storage" },
                        new { Id = 95, Name = "store" },
                        new { Id = 96, Name = "subway_station" },
                        new { Id = 97, Name = "supermarket" },
                        new { Id = 98, Name = "synagogue" },
                        new { Id = 99, Name = "taxi_stand" },
                        new { Id = 100, Name = "tourist_attraction" },
                        new { Id = 101, Name = "train_station" },
                        new { Id = 102, Name = "transit_station" },
                        new { Id = 103, Name = "travel_agency" },
                        new { Id = 104, Name = "university" },
                        new { Id = 105, Name = "veterinary_care" },
                        new { Id = 106, Name = "zoo" }
                    );
                });

            modelBuilder.Entity("Meeter.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("LocationId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Photo");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("isPesudoUser");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Meeter.Models.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("TypeId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Meeter.Models.Event", b =>
                {
                    b.HasOne("Meeter.Models.Group", "Group")
                        .WithMany("Events")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Meeter.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId1");
                });

            modelBuilder.Entity("Meeter.Models.Group", b =>
                {
                    b.HasOne("Meeter.Models.User", "Creator")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("Creatorid");
                });

            modelBuilder.Entity("Meeter.Models.GroupMember", b =>
                {
                    b.HasOne("Meeter.Models.Group", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Meeter.Models.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Meeter.Models.Place", b =>
                {
                    b.HasOne("Meeter.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Meeter.Models.PlaceType", b =>
                {
                    b.HasOne("Meeter.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("Meeter.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Meeter.Models.Type", b =>
                {
                    b.HasOne("Meeter.Models.Place")
                        .WithMany("Types")
                        .HasForeignKey("PlaceId");
                });

            modelBuilder.Entity("Meeter.Models.User", b =>
                {
                    b.HasOne("Meeter.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Meeter.Models.UserPreference", b =>
                {
                    b.HasOne("Meeter.Models.Event", "Event")
                        .WithMany("Preferences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Meeter.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Meeter.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Meeter.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Meeter.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Meeter.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Meeter.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
